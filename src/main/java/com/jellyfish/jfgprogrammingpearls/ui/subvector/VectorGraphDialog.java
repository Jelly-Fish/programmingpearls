package com.jellyfish.jfgprogrammingpearls.ui.subvector;

import com.jellyfish.jfgprogrammingpearls.exceptions.SubArrayNotFoundException;
import com.jellyfish.jfgprogrammingpearls.pearls.SubVectors;
import com.jellyfish.jfgprogrammingpearls.ui.Writable;
import com.jellyfish.jfgprogrammingpearls.utils.ArrayUtils;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author thw
 */
public class VectorGraphDialog extends javax.swing.JDialog {

    private final Writable writer;
    
    /**
     * Creates new form VectorGraphDialog
     * @param parent
     */
    public VectorGraphDialog(final java.awt.Frame parent, final Writable writer) {
        super(parent, true);
        this.writer = writer;
        initComponents();
        this.setLocationRelativeTo(parent);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new javax.swing.JLabel();
        vectorSizeSpinner = new javax.swing.JSpinner();
        label2 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        generateGraphButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generate vector : Programming Pearls Column 8");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        label1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        label1.setText("Generate a random graph vector and highlight max sum sub vector");

        vectorSizeSpinner.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        vectorSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(1000, 100, 10000, 100));
        vectorSizeSpinner.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        label2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        label2.setText("Select vector point amount : ");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        generateGraphButton.setText("Generate graph");
        generateGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateGraphButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(label2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vectorSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateGraphButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vectorSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateGraphButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    @SuppressWarnings("ResultOfObjectAllocationIgnored")
    private void generateGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateGraphButtonActionPerformed
        
        try {
            
            final int s = (int) this.vectorSizeSpinner.getValue();
            final int[] v = ArrayUtils.randomIntegers(s);
            
            // Print the vector to console :
            this.writer.println("\nGenerated random vector's entries - vector size=" + s);
            for (int i = 0; i < v.length; i++) {
                if (i > 0 && i % 20 == 0) {
                    this.writer.print("\n");
                }
                this.writer.print(String.valueOf(v[i]) + "/");
            }
            
            final SubVectors sv = new SubVectors(v);
            final int[] subVector = sv.scan2();
            
            // Print the sub vector to console :
            this.writer.println("\n\nMax sum sub vector's entries - sub vector size=" + subVector.length);
            for (int i = 0; i < v.length; i++) {
                if (i > 0 && i % 20 == 0) {
                    this.writer.print("\n");
                }
                this.writer.print(String.valueOf(v[i]) + "/");
            }
            
            new SubVectorGraphFrame(new SubVectorPanel(v, subVector, sv.subVectorEndIndex));
            this.setVisible(false);
            this.dispose();
        } catch (final SubArrayNotFoundException ex) {
            Logger.getLogger(VectorGraphDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_generateGraphButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton generateGraphButton;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JSpinner vectorSizeSpinner;
    // End of variables declaration//GEN-END:variables
}
